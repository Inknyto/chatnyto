import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:mqtt_client/mqtt_client.dart';
import 'package:mqtt_client/mqtt_server_client.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return const MaterialApp(
      title: 'MQTT Chat App',
      home: ChatPage(),
    );
  }
}

class ChatPage extends StatefulWidget {
  const ChatPage({super.key});

  @override
  State<ChatPage> createState() => _ChatPageState();
}

class _ChatPageState extends State<ChatPage> {
  MqttServerClient? _mqttClient;
  final List<String> _messages = [];
  final _messageController = TextEditingController();

  @override
  void initState() {
    super.initState();
    _connectToMqttBroker();
  }

void _connectToMqttBroker() {
  // Connect to the MQTT broker
  _mqttClient = MqttServerClient('127.0.0.1', 'clientId');

  // Listen for the connected event
  _mqttClient?.onConnected = () {
    if (kDebugMode) {
      print('Connected to MQTT broker');
    }
    // Subscribe to the chat topic
    _mqttClient?.subscribe('chat', MqttQos.atMostOnce);
  };

  // Listen for the disconnected event
  _mqttClient?.onDisconnected = () {
    if (kDebugMode) {
      print('Disconnected from MQTT broker');
    }
  };

  // Connect to the broker
  _mqttClient?.connect();

  // Listen for incoming messages
  _mqttClient?.updates?.listen((List<MqttPublishMessage> event) {
    final message = event[0].payload.asString();
    setState(() {
      _messages.add(message);
    });
  });
}
//  void _connectToMqttBroker() {
//    // Connect to the MQTT broker and subscribe to the chat topic
//    _mqttClient = MqttServerClient('mqtt://localhost', 'clientId');
//    _mqttClient?.updates?.listen((event) {
//      final message = event[0].payload as String;
//      setState(() {
//        _messages.add(message);
//      });
//    });
//    _mqttClient?.subscribe('chat', MqttQos.atMostOnce);
//  }

  void _sendMessage(String message) {
    // Check if the client is connected
    if (_mqttClient?.connectionStatus?.state == MqttConnectionState.connected) {
      // Publish a new message to the chat topic
      final builder = MqttClientPayloadBuilder();
      builder.addString(message);
      _mqttClient?.publishMessage('chat', MqttQos.atMostOnce, builder.payload!);
      _messageController.clear();
    } else {
      // Handle the case when the client is not connected
      if (kDebugMode) {
        print('MQTT client is not connected.');
      }
    }
  }

//  void _sendMessage(String message) {
//    // Publish a new message to the chat topic
//    final builder = MqttClientPayloadBuilder();
//    builder.addString(message);
//    _mqttClient?.publishMessage('chat', MqttQos.atMostOnce, builder.payload!);
//    _messageController.clear();
//  }
//
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('MQTT Chat App'),
      ),
      body: Column(
        children: [
          Expanded(
            child: ListView.builder(
              itemCount: _messages.length,
              itemBuilder: (context, index) {
                return ListTile(
                  title: Text(_messages[index]),
                );
              },
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: _messageController,
                    decoration: const InputDecoration(
                      hintText: 'Type a message...',
                    ),
                    onSubmitted: _sendMessage,
                  ),
                ),
                IconButton(
                  icon: const Icon(Icons.send),
                  onPressed: () {
                    _sendMessage(_messageController.text);
                  },
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  @override
  void dispose() {
    _mqttClient?.unsubscribe('chat');
    _mqttClient?.disconnect();
    super.dispose();
  }
}
